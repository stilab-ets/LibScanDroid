import { Input, Directive, Optional, ElementRef } from '@angular/core';
import * as d3 from 'd3';
var D3ChartDirective = (function () {
    function D3ChartDirective(elementRef) {
        var _this = this;
        this.scales = [];
        this.elements = [];
        this.element = elementRef.nativeElement;
        this.chart = d3.select(this.element).attr('class', 'd3-chart');
        window.addEventListener('resize', function () { return _this.redraw(); });
    }
    Object.defineProperty(D3ChartDirective.prototype, "width", {
        get: function () {
            return this.element.parentElement.clientWidth;
        },
        set: function (value) {
            this.chart.attr('width', value + "px");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(D3ChartDirective.prototype, "height", {
        get: function () {
            return this.element.parentElement.clientHeight;
        },
        set: function (value) {
            this.chart.attr('height', value + "px");
        },
        enumerable: true,
        configurable: true
    });
    D3ChartDirective.prototype.addScale = function (scale) {
        this.scales.push(scale);
    };
    D3ChartDirective.prototype.getScale = function (name) {
        return this.scales.find(function (s) { return s.name === name; });
    };
    D3ChartDirective.prototype.addElement = function (element) {
        this.elements.push(element);
    };
    Object.defineProperty(D3ChartDirective.prototype, "data", {
        get: function () {
            return this._data || [];
        },
        set: function (value) {
            this._data = value;
            this.redraw();
        },
        enumerable: true,
        configurable: true
    });
    D3ChartDirective.prototype.redraw = function () {
        var _this = this;
        window.requestAnimationFrame(function () {
            _this.scales.forEach(function (e) { e.redraw(); });
            _this.elements.forEach(function (e) { e.redraw(); });
        });
    };
    D3ChartDirective.prototype.ngOnInit = function () {
        this.redraw();
    };
    return D3ChartDirective;
}());
export { D3ChartDirective };
D3ChartDirective.decorators = [
    { type: Directive, args: [{
                selector: '[d3-chart]'
            },] },
];
D3ChartDirective.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
D3ChartDirective.propDecorators = {
    'data': [{ type: Input },],
};
var D3MarginDirective = (function () {
    function D3MarginDirective(chart, el) {
        this.chart = chart;
        this.el = el;
        this._margin = { top: 0, left: 0, bottom: 0, right: 0 };
        this.element = d3.select(el.nativeElement);
        chart.addElement(this);
    }
    Object.defineProperty(D3MarginDirective.prototype, "width", {
        get: function () {
            return this.chart.width - this.margin.left - this.margin.right;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(D3MarginDirective.prototype, "height", {
        get: function () {
            return this.chart.height - this.margin.top - this.margin.bottom;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(D3MarginDirective.prototype, "margin", {
        get: function () {
            return this._margin;
        },
        set: function (value) {
            if (value) {
                if (this._margin === value) {
                    return;
                }
                this._margin = value;
                this.redraw();
                this.chart.redraw();
            }
        },
        enumerable: true,
        configurable: true
    });
    D3MarginDirective.prototype.redraw = function () {
        this.element
            .attr('transform', "translate(" + (this.margin.left || '0') + ", " + (this.margin.top || '0') + ")");
    };
    return D3MarginDirective;
}());
export { D3MarginDirective };
D3MarginDirective.decorators = [
    { type: Directive, args: [{
                selector: '[d3-margin]'
            },] },
];
D3MarginDirective.ctorParameters = function () { return [
    { type: D3ChartDirective, },
    { type: ElementRef, },
]; };
D3MarginDirective.propDecorators = {
    'margin': [{ type: Input, args: ['d3-margin',] },],
};
var D3Element = (function () {
    function D3Element(chart, el, _marginEl) {
        this.chart = chart;
        this.el = el;
        this._marginEl = _marginEl;
        this._margin = { top: 0, left: 0, right: 0, bottom: 0 };
        this.element = d3.select(el.nativeElement);
        chart.addElement(this);
    }
    Object.defineProperty(D3Element.prototype, "margin", {
        get: function () {
            return this._marginEl ? this._marginEl.margin : this._margin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(D3Element.prototype, "nativeElement", {
        get: function () {
            return this.el.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(D3Element.prototype, "width", {
        get: function () {
            return this._marginEl ? this._marginEl.width : this.chart.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(D3Element.prototype, "height", {
        get: function () {
            return this._marginEl ? this._marginEl.height : this.chart.height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(D3Element.prototype, "data", {
        get: function () {
            return this.chart.data;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(D3Element.prototype, "horizontalPadding", {
        get: function () {
            return this.width - this.nativeElement.parentElement.clientWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(D3Element.prototype, "verticalPadding", {
        get: function () {
            return this.height - this.nativeElement.parentElement.clientHeight;
        },
        enumerable: true,
        configurable: true
    });
    D3Element.prototype.getScale = function (name) {
        return this.chart.getScale(name);
    };
    D3Element.prototype.redraw = function () {
        return;
    };
    return D3Element;
}());
export { D3Element };
D3Element.ctorParameters = function () { return [
    { type: D3ChartDirective, },
    { type: ElementRef, },
    { type: D3MarginDirective, decorators: [{ type: Optional },] },
]; };
//# sourceMappingURL=chart.js.map