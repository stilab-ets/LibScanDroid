import { Directive, Input, Output, EventEmitter } from '@angular/core';
import * as d3 from 'd3';
var D3DataDirective = (function () {
    function D3DataDirective() {
        this.data = new EventEmitter();
        this._initialized = false;
        this._d3Data = new D3DataService();
    }
    D3DataDirective.prototype.defaultFilter = function (row) {
        for (var key in row) {
            var value = row[key];
            if (!isNaN(parseFloat(value)) && isFinite(value)) {
                row[key] = +value.trim();
            }
            return row;
        }
    };
    Object.defineProperty(D3DataDirective.prototype, "src", {
        get: function () {
            return this._src;
        },
        set: function (value) {
            this._src = value;
            if (this._initialized && this._src && this.src.length > 0) {
                this.fetch();
            }
        },
        enumerable: true,
        configurable: true
    });
    D3DataDirective.prototype.fetch = function () {
        var _this = this;
        if (!this._src) {
            throw new Error('No src url given');
        }
        this._d3Data.csv(this._src, this.accessor || this.defaultFilter, this.callback)
            .then(function (rows) {
            _this.data.next({ rows: rows });
        })
            .catch(function () {
            throw new Error('Error loading CSV via D3');
        });
    };
    D3DataDirective.prototype.ngAfterContentInit = function () {
        this._initialized = true;
        this.fetch();
    };
    return D3DataDirective;
}());
export { D3DataDirective };
D3DataDirective.decorators = [
    { type: Directive, args: [{
                selector: 'd3-data'
            },] },
];
D3DataDirective.ctorParameters = function () { return []; };
D3DataDirective.propDecorators = {
    'accessor': [{ type: Input },],
    'callback': [{ type: Input },],
    'data': [{ type: Output },],
    'src': [{ type: Input },],
};
var DefaultCache = (function () {
    function DefaultCache() {
        this.store = {};
    }
    DefaultCache.prototype.get = function (key) {
        return this.store[key];
    };
    DefaultCache.prototype.put = function (key, value) {
        this.store[key] = value;
    };
    return DefaultCache;
}());
export { DefaultCache };
var D3DataService = (function () {
    function D3DataService() {
        this.cache = new DefaultCache();
    }
    D3DataService.prototype.csv = function (src, accessor, callback) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var cached = _this.cache.get(src);
            if (cached) {
                if (callback) {
                    callback(cached);
                }
                resolve(cached);
            }
            d3.csv(src, accessor, function (rows) {
                if (callback) {
                    callback(rows);
                }
                if (rows) {
                    _this.cache.put(src, rows);
                    resolve(rows);
                }
                else {
                    reject();
                }
            });
        });
    };
    return D3DataService;
}());
export { D3DataService };
//# sourceMappingURL=data.js.map