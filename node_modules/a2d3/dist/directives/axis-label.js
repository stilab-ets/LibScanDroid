var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Input, Optional, Directive, ElementRef } from '@angular/core';
import { D3ChartDirective, D3Element, D3MarginDirective } from './chart';
var D3AxisLabelDirective = (function (_super) {
    __extends(D3AxisLabelDirective, _super);
    function D3AxisLabelDirective(chart, el, margin) {
        var _this = _super.call(this, chart, el, margin) || this;
        _this.position = 'left';
        _this.xPadding = '0';
        _this.yPadding = '0';
        chart.addElement(_this);
        return _this;
    }
    D3AxisLabelDirective.prototype.redraw = function () {
        this.updateLabel();
    };
    Object.defineProperty(D3AxisLabelDirective.prototype, "label", {
        get: function () {
            return this._label;
        },
        set: function (value) {
            this._label = value;
            if (this._textElement) {
                this._textElement.text(this._label);
            }
        },
        enumerable: true,
        configurable: true
    });
    D3AxisLabelDirective.prototype.updateLabel = function () {
        if (!this._textElement) {
            this._textElement = this.element.append('text').attr('class', 'axis-label');
            this._textElement.text(this.label);
        }
        if (!this._scale) {
            this._scale = this.getScale(this.axis);
        }
        if (!this._xPadding) {
            this._xPadding = parseFloat(this.xPadding);
        }
        if (!this._yPadding) {
            this._yPadding = parseFloat(this.yPadding);
        }
        var isVertical = this._scale.isVertical();
        var x = this._xPadding;
        var y = this._yPadding;
        var scaledValue = this._scale.scale(this.value);
        if (isVertical) {
            this._textElement
                .attr('transform', 'rotate(-90)');
            if (this.position === 'middle') {
                x += -this.height / 2;
                y += scaledValue;
            }
            else if (this._scale.orientation === 'top' && this.position === 'start'
                || this._scale.orientation === 'bottom' && this.position === 'end') {
                this._textElement
                    .attr('style', 'text-anchor: end');
                y += scaledValue;
            }
            else {
                x += -this.height;
                y += scaledValue;
            }
        }
        else {
            if (this.position === 'middle') {
                x += this.width / 2;
                y += scaledValue;
            }
            else if (this._scale.orientation === 'left' && this.position === 'start'
                || this._scale.orientation === 'right' && this.position === 'end') {
                y += scaledValue;
            }
            else {
                x += this.width;
                y += scaledValue;
                this._textElement.attr('style', 'text-anchor: end');
            }
        }
        this._textElement
            .attr('x', x)
            .attr('y', y);
    };
    return D3AxisLabelDirective;
}(D3Element));
export { D3AxisLabelDirective };
D3AxisLabelDirective.decorators = [
    { type: Directive, args: [{
                selector: '[d3-axis-label]'
            },] },
];
D3AxisLabelDirective.ctorParameters = function () { return [
    { type: D3ChartDirective, },
    { type: ElementRef, },
    { type: D3MarginDirective, decorators: [{ type: Optional },] },
]; };
D3AxisLabelDirective.propDecorators = {
    'value': [{ type: Input },],
    'axis': [{ type: Input },],
    'position': [{ type: Input },],
    'xPadding': [{ type: Input, args: ['x-padding',] },],
    'yPadding': [{ type: Input, args: ['y-padding',] },],
    'label': [{ type: Input },],
};
//# sourceMappingURL=axis-label.js.map