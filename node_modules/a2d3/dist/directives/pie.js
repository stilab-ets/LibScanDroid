var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Input, Optional, Directive, ElementRef } from '@angular/core';
import { D3ChartDirective, D3Element, D3MarginDirective } from './chart';
import * as d3 from 'd3';
var D3PieBase = (function (_super) {
    __extends(D3PieBase, _super);
    function D3PieBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.innerRadius = 0;
        _this.labelRadius = 0.7;
        return _this;
    }
    Object.defineProperty(D3PieBase.prototype, "radius", {
        get: function () {
            if (this.radiusAttr === 'height') {
                return (this.height - this.verticalPadding) / 2;
            }
            else {
                return (this.width - this.horizontalPadding) / 2;
            }
        },
        enumerable: true,
        configurable: true
    });
    D3PieBase.prototype.createArc = function (radius) {
        return d3.svg.arc()
            .outerRadius(radius)
            .innerRadius(radius * this.innerRadius);
    };
    D3PieBase.prototype.createLabelArc = function (radius, offset) {
        if (offset === void 0) { offset = 0; }
        return d3.svg.arc()
            .outerRadius(radius * this.labelRadius + offset)
            .innerRadius(radius * this.labelRadius + offset);
    };
    D3PieBase.prototype.createArcTween = function (arc, initial) {
        if (initial === void 0) { initial = null; }
        return function (d) {
            if (this._current == null) {
                this._current = initial != null ? initial : d;
            }
            var i = d3.interpolate(this._current, d);
            this._current = d;
            return function (t) { return arc(i(t)); };
        };
    };
    D3PieBase.prototype.redraw = function () {
        if (this.radiusAttr === 'height') {
            this.chart.width = this.height;
            this.chart.height = this.height;
        }
        else {
            this.chart.height = this.width;
            this.chart.width = this.width;
        }
    };
    return D3PieBase;
}(D3Element));
export { D3PieBase };
var D3PieDirective = (function (_super) {
    __extends(D3PieDirective, _super);
    function D3PieDirective(chart, el, margin) {
        var _this = _super.call(this, chart, el, margin) || this;
        _this.transition = 'ease';
        _this.duration = 500;
        _this.value = 'value';
        _this.label = 'label';
        _this.labelOffset = 12;
        _this.textAnchor = 'middle';
        _this.dy = '0.35em';
        _this.pie = d3.layout.pie().sort(null).value(function (d) { return d[_this.value]; });
        _this._center = _this.element.attr('class', 'pie');
        return _this;
    }
    Object.defineProperty(D3PieDirective.prototype, "colorScale", {
        get: function () {
            return this._colorScale;
        },
        set: function (value) {
            if (d3.scale[value]) {
                this._colorScale = d3.scale[value]();
            }
        },
        enumerable: true,
        configurable: true
    });
    D3PieDirective.prototype.redraw = function () {
        var _this = this;
        var data = this.data;
        _super.prototype.redraw.call(this);
        var radius = this.radius;
        var arc = this.createArc(radius);
        var arcTween = this.createArcTween(arc);
        this._center.attr('transform', "translate(" + radius + ", " + radius + ")");
        var slices = this._center.selectAll('path.pie').data(this.pie(data));
        slices.enter().append('path')
            .attr('class', function (d, i) { return "pie pie-" + i; })
            .attr('d', arc);
        slices.style('fill', function (d, i) { return _this.getColors(d, i); })
            .attr('class', function (d, i) { return "pie pie-" + i; });
        slices.transition().ease(this.transition).duration(this.duration)
            .attrTween('d', arcTween);
        slices.exit().remove();
        if (this.label) {
            var label = this._center.selectAll('text').data(this.pie(data));
            label.enter().append('text')
                .attr('class', function (d, i) { return "pie-label pie-label-" + i; });
            label.style('text-anchor', this.textAnchor)
                .attr('class', function (d, i) { return "pie-label pie-label-" + i; })
                .text(function (d, i) { return d.data[_this.label]; });
            label.transition().ease(this.transition).duration(this.duration)
                .attr('transform', this.getLabelPosition(radius));
            label.exit().remove();
        }
    };
    D3PieDirective.prototype.getLabelPosition = function (radius) {
        var padding = +this.labelOffset;
        var avoidCollisions = this.avoidCollisions;
        var labelArc = this.createLabelArc(radius);
        var prevbb;
        return function (d) {
            var position = labelArc.centroid(d);
            if (avoidCollisions) {
                var relativePosition = [position[0], position[1]];
                if (this._position) {
                    relativePosition[0] -= this._position[0];
                    relativePosition[1] -= this._position[1];
                }
                var bb = this.getBoundingClientRect();
                var thisbb = {
                    left: bb.left + (relativePosition[0] - padding),
                    top: bb.top + (relativePosition[1] - padding),
                    right: bb.right + relativePosition[0] + padding,
                    bottom: bb.bottom + relativePosition[1] + padding,
                };
                var hasCollision = !(thisbb.right < prevbb.left
                    || thisbb.left > prevbb.right
                    || thisbb.bottom < prevbb.top
                    || thisbb.top > prevbb.bottom);
                if (prevbb && hasCollision) {
                    var ctx = thisbb.left + (thisbb.right - thisbb.left) / 2;
                    var cty = thisbb.top + (thisbb.bottom - thisbb.top) / 2;
                    var cpx = prevbb.left + (prevbb.right - prevbb.left) / 2;
                    var cpy = prevbb.top + (prevbb.bottom - prevbb.top) / 2;
                    var offset = Math.sqrt(Math.pow(ctx - cpx, 2) + Math.pow(cty - cpy, 2)) / 2;
                    var offsetArc = this.createLabelArc(radius, offset);
                    position = offsetArc.centroid(d);
                }
                this._position = position;
                prevbb = thisbb;
            }
            return "translate(" + position + ")";
        };
    };
    D3PieDirective.prototype.getColors = function (d, i) {
        if (this.colorScale) {
            return this.colorScale(i);
        }
        if (this.color) {
            return d[this.color];
        }
        if (d.color) {
            return d.color;
        }
    };
    return D3PieDirective;
}(D3PieBase));
export { D3PieDirective };
D3PieDirective.decorators = [
    { type: Directive, args: [{
                selector: '[d3-pie]'
            },] },
];
D3PieDirective.ctorParameters = function () { return [
    { type: D3ChartDirective, },
    { type: ElementRef, },
    { type: D3MarginDirective, decorators: [{ type: Optional },] },
]; };
D3PieDirective.propDecorators = {
    'name': [{ type: Input },],
    'transition': [{ type: Input },],
    'duration': [{ type: Input },],
    'value': [{ type: Input },],
    'label': [{ type: Input },],
    'innerRadius': [{ type: Input, args: ['inner-radius',] },],
    'labelRadius': [{ type: Input, args: ['label-radius',] },],
    'labelOffset': [{ type: Input, args: ['label-offset',] },],
    'textAnchor': [{ type: Input, args: ['text-anchor',] },],
    'color': [{ type: Input },],
    'avoidCollisions': [{ type: Input, args: ['avoid-collisions',] },],
    'colorScale': [{ type: Input, args: ['color-scale',] },],
};
//# sourceMappingURL=pie.js.map