var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Input, Optional, Directive, ElementRef } from '@angular/core';
import { D3ChartDirective, D3Element, D3MarginDirective } from './chart';
import * as d3 from 'd3';
var D3LineDirective = (function (_super) {
    __extends(D3LineDirective, _super);
    function D3LineDirective(chart, el, margin) {
        var _this = _super.call(this, chart, el, margin) || this;
        _this.xDataName = 0;
        _this.yDataName = 1;
        _this._linePath = _this.element.append('path');
        return _this;
    }
    D3LineDirective.prototype.redraw = function () {
        var _this = this;
        var data = this.data;
        this._line = this._line || d3.svg.line().x(function (d) { return _this.x(d); }).y(function (d) { return _this.y(d); });
        this._linePath.attr('class', "line line-" + (this.name || this.yDataName))
            .style('fill', 'none')
            .style('stroke', this.stroke);
        this._linePath.datum(data).transition().duration(500).attr('d', this._line);
    };
    Object.defineProperty(D3LineDirective.prototype, "xScale", {
        get: function () {
            return (this._xScale = this._xScale
                || this.getScale(this.xScaleName || this.xDataName)).scale;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(D3LineDirective.prototype, "yScale", {
        get: function () {
            return (this._yScale = this._yScale
                || this.getScale(this.yScaleName || this.yDataName)).scale;
        },
        enumerable: true,
        configurable: true
    });
    D3LineDirective.prototype.x = function (d) {
        return this.xScale(d[this.xDataName]);
    };
    D3LineDirective.prototype.y = function (d) {
        return this.yScale(d[this.yDataName]);
    };
    return D3LineDirective;
}(D3Element));
export { D3LineDirective };
D3LineDirective.decorators = [
    { type: Directive, args: [{
                selector: '[d3-line]'
            },] },
];
D3LineDirective.ctorParameters = function () { return [
    { type: D3ChartDirective, },
    { type: ElementRef, },
    { type: D3MarginDirective, decorators: [{ type: Optional },] },
]; };
D3LineDirective.propDecorators = {
    'name': [{ type: Input },],
    'stroke': [{ type: Input },],
    'xDataName': [{ type: Input, args: ['x',] },],
    'yDataName': [{ type: Input, args: ['y',] },],
    'xScaleName': [{ type: Input, args: ['xscale',] },],
    'yScaleName': [{ type: Input, args: ['yscale',] },],
};
//# sourceMappingURL=line.js.map