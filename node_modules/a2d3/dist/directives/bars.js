var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Input, Optional, Directive, ElementRef } from '@angular/core';
import { D3ChartDirective, D3Element, D3MarginDirective } from './chart';
var D3BarsDirective = (function (_super) {
    __extends(D3BarsDirective, _super);
    function D3BarsDirective(chart, el, margin) {
        var _this = _super.call(this, chart, el, margin) || this;
        _this.barWidth = 15;
        _this._barsElement = _this.element.attr('class', 'bars');
        return _this;
    }
    D3BarsDirective.prototype.redraw = function () {
        var _this = this;
        var data = this.data;
        var bars = this._barsElement.selectAll('rect.bar').data(data);
        bars.exit().transition().duration(500)
            .attr('y', function () { return _this.height; })
            .attr('height', 0)
            .remove();
        bars.transition().duration(500)
            .attr('x', function (d) { return _this.x(d[_this.xDataName]) - _this.barWidth / 2; })
            .attr('y', function (d) { return _this.y(d[_this.yDataName]); })
            .attr('height', function (d) { return _this.height - _this.y(d[_this.yDataName]); })
            .attr('width', this.barWidth);
        bars.enter()
            .append('rect')
            .attr('class', function (d, i) { return "bar bar-" + i; })
            .attr('x', function (d) { return _this.x(d[_this.xDataName]) - _this.barWidth / 2; })
            .attr('y', function () { return _this.height; })
            .attr('height', 0)
            .attr('width', this.barWidth)
            .transition().duration(500)
            .attr('y', function (d) { return _this.y(d[_this.yDataName]); })
            .attr('height', function (d) { return _this.height - _this.y(d[_this.yDataName]); });
    };
    Object.defineProperty(D3BarsDirective.prototype, "x", {
        get: function () {
            return (this._xScale = this._xScale
                || this.getScale(this.xScaleName || this.xDataName)).scale;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(D3BarsDirective.prototype, "y", {
        get: function () {
            return (this._yScale = this._yScale
                || this.getScale(this.yScaleName || this.yDataName)).scale;
        },
        enumerable: true,
        configurable: true
    });
    return D3BarsDirective;
}(D3Element));
export { D3BarsDirective };
D3BarsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[d3-bars]'
            },] },
];
D3BarsDirective.ctorParameters = function () { return [
    { type: D3ChartDirective, },
    { type: ElementRef, },
    { type: D3MarginDirective, decorators: [{ type: Optional },] },
]; };
D3BarsDirective.propDecorators = {
    'name': [{ type: Input },],
    'barWidth': [{ type: Input, args: ['width',] },],
    'xDataName': [{ type: Input, args: ['x',] },],
    'yDataName': [{ type: Input, args: ['y',] },],
    'xScaleName': [{ type: Input, args: ['xscale',] },],
    'yScaleName': [{ type: Input, args: ['yscale',] },],
};
//# sourceMappingURL=bars.js.map